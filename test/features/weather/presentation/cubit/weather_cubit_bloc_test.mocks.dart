// Mocks generated by Mockito 5.4.5 from annotations
// in weather_cast/test/features/weather/presentation/cubit/weather_cubit_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:weather_cast/core/errors/failures.dart' as _i6;
import 'package:weather_cast/features/weather/domain/entities/weather_forecast.dart'
    as _i7;
import 'package:weather_cast/features/weather/domain/entities/weekly_forecast.dart'
    as _i9;
import 'package:weather_cast/features/weather/domain/repositories/weather_repository.dart'
    as _i2;
import 'package:weather_cast/features/weather/domain/usecases/aggregate_weekly_forecast.dart'
    as _i8;
import 'package:weather_cast/features/weather/domain/usecases/get_weather_forecast.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWeatherRepository_0 extends _i1.SmartFake
    implements _i2.WeatherRepository {
  _FakeWeatherRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetWeatherForecastUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWeatherForecastUseCase extends _i1.Mock
    implements _i4.GetWeatherForecastUseCase {
  MockGetWeatherForecastUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WeatherRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeWeatherRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.WeatherRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.WeatherForecastEntity>> execute(
          String? cityName) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [cityName],
        ),
        returnValue: _i5
            .Future<_i3.Either<_i6.Failure, _i7.WeatherForecastEntity>>.value(
            _FakeEither_1<_i6.Failure, _i7.WeatherForecastEntity>(
          this,
          Invocation.method(
            #execute,
            [cityName],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.WeatherForecastEntity>>);
}

/// A class which mocks [AggregateWeeklyForecastUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAggregateWeeklyForecastUseCase extends _i1.Mock
    implements _i8.AggregateWeeklyForecastUseCase {
  MockAggregateWeeklyForecastUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Either<_i6.Failure, _i9.WeeklyForecastEntity> execute(
          _i7.WeatherForecastEntity? weatherForecast) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [weatherForecast],
        ),
        returnValue: _FakeEither_1<_i6.Failure, _i9.WeeklyForecastEntity>(
          this,
          Invocation.method(
            #execute,
            [weatherForecast],
          ),
        ),
      ) as _i3.Either<_i6.Failure, _i9.WeeklyForecastEntity>);
}
